//Assignment 7 (final assignment) by Jonathan Taylor
//This program finds prime numbers up to 1000 using the sieve method.

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

struct node{
	int data;
	struct node *next;
}*head;

//Allocate the size of the node which is taken from n in main.
void allocatenode(int num){
	struct node *temp,*right;
	temp= (struct node *)malloc(sizeof(struct node));
	temp->data=num;
	right=(struct node *)head;
	if(right == NULL) {
		head = temp;
		head->next = NULL;
	return;
}
	while(right->next != NULL)
		right=right->next;
  		right->next =temp;
		right=temp;
		right->next=NULL;
}

//Displays a list of prime numbers.
void showprimes(){
	struct node *p=head;
	if(p==NULL){
		return;
	}
	while(p!=NULL){
		printf("%d ",p->data);
		p=p->next;
	}
	printf("\n");
}


//Deletes all multiples of an integer k, except k.
void deletemultiples(int num) {
	struct node *temp, *prev;
	temp=head;
	while(temp!=NULL){
		if(temp->data!=num && temp->data%num == 0){
			if(temp==head){
				head=temp->next;
				free(temp);
				temp = head;
			} else {
				prev->next=temp->next;
				free(temp);
				temp = prev->next;
			}
		} else {
			prev=temp;
			temp= temp->next;
		}
	}
}

//Where the magic happens.
int main(){
	int n = 2;
	for(; n<1000; n++) {
	allocatenode(n);
	}
  
	for(n=2; n<32; n++)
		deletemultiples(n);
  
	printf("Prime Numbers:\n");
	showprimes();
	return 0;
}
